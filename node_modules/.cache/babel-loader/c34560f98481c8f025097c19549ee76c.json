{"ast":null,"code":"var _jsxFileName = \"/Users/tsujiokataichi/Desktop/udemy-react-redux-crud-application/src/components/events_new.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Link } from \"react-router-dom\";\nimport RaisedButton from \"material-ui/RaisedButton\";\nimport TextField from \"material-ui/TextField\"; // import { format } from \"path\";\n// import { from } from \"rxjs\";\n// import { importDefaultSpecifier } from \"@babel/types\";\n// import { __values } from \"tslib\";\n\nimport { postEvent } from \"../actions\";\n\nclass EventsNew extends Component {\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  renderField(field) {\n    const input = field.input,\n          label = field.label,\n          type = field.type,\n          _field$meta = field.meta,\n          touched = _field$meta.touched,\n          error = _field$meta.error;\n    return React.createElement(TextField, Object.assign({\n      hintText: label,\n      floatingLabelText: label,\n      type: type,\n      errorText: touched && error\n    }, input, {\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }));\n  }\n\n  async onSubmit(values) {\n    await this.props.postEvent(values);\n    this.props.history.push(\"/\");\n  }\n\n  render() {\n    const _this$props = this.props,\n          handleSubmit = _this$props.handleSubmit,\n          pristine = _this$props.pristine,\n          submitting = _this$props.submitting,\n          invalid = _this$props.invalid;\n    const style = {\n      margin: 12\n    };\n    return React.createElement(\"form\", {\n      onSubmit: handleSubmit(this.onSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Field, {\n      label: \"Title\",\n      name: \"title\",\n      type: \"text\",\n      component: this.renderField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Field, {\n      label: \"Body\",\n      name: \"body\",\n      type: \"text\",\n      component: this.renderField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    })), React.createElement(RaisedButton, {\n      label: \"Submit\",\n      type: \"submit\",\n      style: style,\n      disabled: pristine || submitting || invalid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(RaisedButton, {\n      label: \"Cancel\",\n      style: style,\n      containerElement: React.createElement(Link, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst validate = values => {\n  const errors = {};\n  if (!values.title) errors.title = \"Enter a title, please.\";\n  if (!values.body) errors.body = \"Enter a body, please.\";\n  return errors;\n};\n\nconst mapDispatchToProps = {\n  postEvent\n};\nexport default connect(null, mapDispatchToProps)(reduxForm({\n  validate,\n  form: \"eventNewForm\"\n})(EventsNew));","map":{"version":3,"sources":["/Users/tsujiokataichi/Desktop/udemy-react-redux-crud-application/src/components/events_new.js"],"names":["React","Component","connect","Field","reduxForm","Link","RaisedButton","TextField","postEvent","EventsNew","constructor","props","onSubmit","bind","renderField","field","input","label","type","meta","touched","error","values","history","push","render","handleSubmit","pristine","submitting","invalid","style","margin","validate","errors","title","body","mapDispatchToProps","form"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Link } from \"react-router-dom\";\nimport RaisedButton from \"material-ui/RaisedButton\";\nimport TextField from \"material-ui/TextField\";\n\n// import { format } from \"path\";\n// import { from } from \"rxjs\";\n// import { importDefaultSpecifier } from \"@babel/types\";\n// import { __values } from \"tslib\";\nimport { postEvent } from \"../actions\";\n\nclass EventsNew extends Component {\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n  renderField(field) {\n    const {\n      input,\n      label,\n      type,\n      meta: { touched, error }\n    } = field;\n\n    return (\n      <TextField\n        hintText={label}\n        floatingLabelText={label}\n        type={type}\n        errorText={touched && error}\n        {...input}\n        fullWidth={true}\n      />\n    );\n  }\n\n  async onSubmit(values) {\n    await this.props.postEvent(values);\n    this.props.history.push(\"/\");\n  }\n\n  render() {\n    const { handleSubmit, pristine, submitting, invalid } = this.props;\n    const style = { margin: 12 };\n    return (\n      <form onSubmit={handleSubmit(this.onSubmit)}>\n        <div>\n          <Field\n            label=\"Title\"\n            name=\"title\"\n            type=\"text\"\n            component={this.renderField}\n          />\n        </div>\n\n        <div>\n          <Field\n            label=\"Body\"\n            name=\"body\"\n            type=\"text\"\n            component={this.renderField}\n          />\n        </div>\n\n        <RaisedButton\n          label=\"Submit\"\n          type=\"submit\"\n          style={style}\n          disabled={pristine || submitting || invalid}\n        />\n\n        <RaisedButton\n          label=\"Cancel\"\n          style={style}\n          containerElement={<Link to=\"/\" />}\n        />\n      </form>\n    );\n  }\n}\n\nconst validate = values => {\n  const errors = {};\n\n  if (!values.title) errors.title = \"Enter a title, please.\";\n  if (!values.body) errors.body = \"Enter a body, please.\";\n\n  return errors;\n};\n\nconst mapDispatchToProps = { postEvent };\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(reduxForm({ validate, form: \"eventNewForm\" })(EventsNew));\n"]},"metadata":{},"sourceType":"module"}