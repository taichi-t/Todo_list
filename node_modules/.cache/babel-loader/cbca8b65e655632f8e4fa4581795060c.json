{"ast":null,"code":"var _jsxFileName = \"/Users/tsujiokataichi/Desktop/udemy-react-redux-crud-application/src/components/events_new.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport { Link } from 'react-router-dom';\nimport { format } from 'path';\nimport { from } from 'rxjs';\nimport { importDefaultSpecifier } from '@babel/types';\nimport { __values } from 'tslib';\nimport { postEvent } from '../actions';\n\nclass EventsNew extends Component {\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  renderField(field) {\n    const input = field.input,\n          label = field.label,\n          type = field.type,\n          _field$meta = field.meta,\n          touched = _field$meta.touched,\n          error = _field$meta.error;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(\"input\", Object.assign({}, input, {\n      placeholder: label,\n      type: type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    })), touched && error && React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, error));\n  }\n\n  async onSubmit(values) {\n    await this.props.postEvent(values);\n    this.props.history.push(\"/\");\n  }\n\n  render() {\n    const _this$props = this.props,\n          handleSubmit = _this$props.handleSubmit,\n          pristine = _this$props.pristine;\n    return React.createElement(\"form\", {\n      onSubmit: handleSubmit(this.onSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \" \", React.createElement(Field, {\n      label: \"Title\",\n      name: \"title\",\n      type: \"text\",\n      component: this.renderField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \" \", React.createElement(Field, {\n      label: \"Body\",\n      name: \"body\",\n      type: \"text\",\n      component: this.renderField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      disabled: pristine,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Cancel\")));\n  }\n\n}\n\nconst validate = values => {\n  const errors = {};\n  if (!values.title) errors.title = \"Enter a title, please.\";\n  if (!values.body) errors.body = \"Enter a body, please.\";\n  return errors;\n};\n\nconst mapDispatchToProps = {\n  postEvent\n};\nexport default connect(null, mapDispatchToProps)(reduxForm({\n  validate,\n  form: 'eventNewForm'\n})(EventsNew));","map":{"version":3,"sources":["/Users/tsujiokataichi/Desktop/udemy-react-redux-crud-application/src/components/events_new.js"],"names":["React","Component","connect","Field","reduxForm","Link","format","from","importDefaultSpecifier","__values","postEvent","EventsNew","constructor","props","onSubmit","bind","renderField","field","input","label","type","meta","touched","error","values","history","push","render","handleSubmit","pristine","validate","errors","title","body","mapDispatchToProps","form"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport { connect } from 'react-redux'\nimport { Field, reduxForm} from 'redux-form'\nimport { Link } from 'react-router-dom'\nimport { format } from 'path';\nimport { from } from 'rxjs';\nimport { importDefaultSpecifier } from '@babel/types';\nimport { __values } from 'tslib';\nimport { postEvent } from '../actions'\n\nclass EventsNew extends Component {\n  constructor(props){\n    super(props)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n  renderField(field){\n    const {input, label, type, meta: {touched, error } } = field\n\n    return (\n      <div>\n        <input {...input} placeholder={label} type={type}/>\n        {touched && error && <span>{error}</span>}\n      </div>\n    )\n  }\n\n  async onSubmit(values){\n    await this.props.postEvent(values)\n    this.props.history.push(\"/\")\n  }\n\n  render(){\n    const { handleSubmit,pristine　}= this.props\n  return(\n    <form onSubmit={handleSubmit(this.onSubmit)}>   \n      <div> <Field label=\"Title\" name=\"title\" type=\"text\" component={this.renderField}/></div> \n      <div> <Field label=\"Body\" name=\"body\" type=\"text\" component={this.renderField}/></div> \n\n      <div>\n        <input type=\"submit\" value=\"Submit\" disabled={pristine} />\n        <Link to=\"/\" >Cancel</Link>\n      </div>\n    </form>      \n     )\n  }\n}\n\nconst validate = values =>{\n  const errors =　{}\n\n  if(!values.title) errors.title = \"Enter a title, please.\"\n  if(!values.body) errors.body = \"Enter a body, please.\"\n\n  return errors\n}\n\nconst mapDispatchToProps =({ postEvent })\n\nexport default connect (null, mapDispatchToProps)\n(reduxForm({ validate, form: 'eventNewForm'})(EventsNew)\n)\n\n\n"]},"metadata":{},"sourceType":"module"}