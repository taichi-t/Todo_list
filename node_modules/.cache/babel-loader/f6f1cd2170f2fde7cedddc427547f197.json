{"ast":null,"code":"var _jsxFileName = \"/Users/tsujiokataichi/Desktop/udemy-react-redux-crud-application/src/components/events_new.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Link } from \"react-router-dom\";\nimport { format } from \"path\";\nimport { from } from \"rxjs\";\nimport { importDefaultSpecifier } from \"@babel/types\";\nimport { __values } from \"tslib\";\nimport { postEvent } from \"../actions\";\n\nclass EventsNew extends Component {\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  renderField(field) {\n    const input = field.input,\n          label = field.label,\n          type = field.type,\n          _field$meta = field.meta,\n          touched = _field$meta.touched,\n          error = _field$meta.error;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"input\", Object.assign({}, input, {\n      placeholder: label,\n      type: type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    })), touched && error && React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, error));\n  }\n\n  async onSubmit(values) {\n    await this.props.postEvent(values);\n    this.props.history.push(\"/\");\n  }\n\n  render() {\n    const _this$props = this.props,\n          handleSubmit = _this$props.handleSubmit,\n          pristine = _this$props.pristine,\n          submitting = _this$props.submitting,\n          invalid = _this$props.invalid;\n    console.log(submitting);\n    return React.createElement(\"form\", {\n      onSubmit: handleSubmit(this.onSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \" \", React.createElement(Field, {\n      label: \"Title\",\n      name: \"title\",\n      type: \"text\",\n      component: this.renderField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \" \", React.createElement(Field, {\n      label: \"Body\",\n      name: \"body\",\n      type: \"text\",\n      component: this.renderField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      disabled: pristine || submitting || invalid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Cancel\")));\n  }\n\n}\n\nconst validate = values => {\n  const errors = {};\n  if (!values.title) errors.title = \"Enter a title, please.\";\n  if (!values.body) errors.body = \"Enter a body, please.\";\n  return errors;\n};\n\nconst mapDispatchToProps = {\n  postEvent\n};\nexport default connect(null, mapDispatchToProps)(reduxForm({\n  validate,\n  form: \"eventNewForm\"\n})(EventsNew));","map":{"version":3,"sources":["/Users/tsujiokataichi/Desktop/udemy-react-redux-crud-application/src/components/events_new.js"],"names":["React","Component","connect","Field","reduxForm","Link","format","from","importDefaultSpecifier","__values","postEvent","EventsNew","constructor","props","onSubmit","bind","renderField","field","input","label","type","meta","touched","error","values","history","push","render","handleSubmit","pristine","submitting","invalid","console","log","validate","errors","title","body","mapDispatchToProps","form"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Link } from \"react-router-dom\";\nimport { format } from \"path\";\nimport { from } from \"rxjs\";\nimport { importDefaultSpecifier } from \"@babel/types\";\nimport { __values } from \"tslib\";\nimport { postEvent } from \"../actions\";\n\nclass EventsNew extends Component {\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n  renderField(field) {\n    const {\n      input,\n      label,\n      type,\n      meta: { touched, error }\n    } = field;\n\n    return (\n      <div>\n        <input {...input} placeholder={label} type={type} />\n        {touched && error && <span>{error}</span>}\n      </div>\n    );\n  }\n\n  async onSubmit(values) {\n    await this.props.postEvent(values);\n    this.props.history.push(\"/\");\n  }\n\n  render() {\n    const { handleSubmit, pristine, submitting, invalid } = this.props;\n    console.log(submitting);\n    return (\n      <form onSubmit={handleSubmit(this.onSubmit)}>\n        <div>\n          {\" \"}\n          <Field\n            label=\"Title\"\n            name=\"title\"\n            type=\"text\"\n            component={this.renderField}\n          />\n        </div>\n        <div>\n          {\" \"}\n          <Field\n            label=\"Body\"\n            name=\"body\"\n            type=\"text\"\n            component={this.renderField}\n          />\n        </div>\n\n        <div>\n          <input\n            type=\"submit\"\n            value=\"Submit\"\n            disabled={pristine || submitting || invalid}\n          />\n          <Link to=\"/\">Cancel</Link>\n        </div>\n      </form>\n    );\n  }\n}\n\nconst validate = values => {\n  const errors = {};\n\n  if (!values.title) errors.title = \"Enter a title, please.\";\n  if (!values.body) errors.body = \"Enter a body, please.\";\n\n  return errors;\n};\n\nconst mapDispatchToProps = { postEvent };\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(reduxForm({ validate, form: \"eventNewForm\" })(EventsNew));\n"]},"metadata":{},"sourceType":"module"}